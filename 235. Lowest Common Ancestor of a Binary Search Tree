// 235. Lowest Common Ancestor of a Binary Search Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // p and q will exist in the BST
        // Assuption: there at least two nodes
        
        // case 1: q or p is the root
        if (root == null || p == root || q == root) {
            return root;
        }
        
        
        // case 2: p and q are in different subtrees
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        // if left/right is null means no q or p is in the subtree
        // if left/right is not null means: at least one node is in the subtree
        
        if (left != null && right != null) {
            return root;
        }
        // case 3: p and q are in the same subtree
        // if (left != null || right != null) 
        return left != null ? left : right;
        
    }
}
